#!/usr/bin/env python
import socket
from threading import *
import subprocess
import sys
import getopt
import time
import os
from optparse import OptionParser
import platform

OS = platform.platform()
HOST = ''
universalPorts = {
    21: "FTP",22: "SSH",23: "TELNET",25: "SMTP",53: "DNS",69: "TFTP",80: "HTTP",
    109:"POP2",110: "POP3", 123 : "NTP", 137: "NETBIOS-NS", 138: "NETBIOS-DGM",
    139: "NETBIOS-SSN", 143: "IMAP", 156: "SQL-SERVER", 389: "LDAP", 443: "HTTPS",
    546: "DHCP-CLIENT", 547: "DHCP-SERVER", 993: "IMAP-SSL", 995: "POP3-SSL",
    2086: "WHM/CPANEL", 2087: "WHM/CPANEL", 2082: "CPANEL", 2083: "CPANEL", 3306: "MYSQL",
    8443: "PLESK", 10000: "VIRTUALMIN/WEBMIN"
}
commonPorts = [21,22,23,25,53,80,110,137,138,139,143,156,443,547,993,995,2086,2087,2082,2083,3306]
def banner():
    if "Windows" in OS:
        subprocess.call('cls', shell=True)
    else:
        subprocess.call('clear', shell=True)
    print "*-----------------------------------------------------------------*"
    print "*        +++++++++++++++O--^                                      *"
    print "*    |        | ___\   / \    /~~~|                               *"            
    print "*   _:_______|/'(..)`\/___\__/  | |          |                    *"            
    print "*  <_|``````  \__~~__/  KAF  ___|_|         \ /                   *"            
    print "*    :\_____(=========,(*),--\__|_/   --=_/( . )\_=--             *"            
    print "*    |       \       /---'                                        *"            
    print "*             | (*) /                               |             *"            
    print "*             |____/                             --=O=--          *"            
    print "*                             |                                   *"
    print "*                          --=O=--                                *"                                                  
    print "*-----------------------------------------------------------------*"                                                                
    print "* PortBomber(V.0) by sspepsi4l                                    *"
    print "* A Port Scanner in Python                                        *"
    print "*-----------------------------------------------------------------* \n\n"



def enumerateHost(remoteServer):
    try:
        remoteServerIP  = socket.gethostbyname(remoteServer)
        print "[!]Hostname IP: ", remoteServerIP
    except socket.gaierror:
        print '[-]Hostname could not be resolved, Exiting.'
        sys.exit()
    return remoteServerIP

def pingScan(ip):

    FNULL = open(os.devnull, 'w')
    print "-" * 60
    print "[*]Performing Ping Scan to see if Host is Up..."
    print "-" * 60
    res = subprocess.call(['ping', '-c', '1', ip,], stdout=FNULL, stderr=subprocess.STDOUT)
    if res == 0:
        print "[*]Ping to", ip, "OK"
    elif res == 2:
        print "[!]No response from", ip
    else:
        print "[!]Ping to", ip, "failed!"

def quickScan(ip):
    print "-" * 60
    print "[*]Performing quickscan on host:", ip
    print "-" * 60
    startTime= time.time()
    for port in commonPorts:
        t = Thread(target=portScan, args =(ip, int(port)))
        t.start()
        t.join()
    endTime= time.time()
    scanTime = endTime - startTime

    print "[!]Scan completed, time elapsed: {} seconds.".format(scanTime)


def portScan(ip, port):
    socket.setdefaulttimeout(.1)
    message = "KickAss FrameWork"
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        result = sock.connect_ex((ip, port))
        if result == 0:
            if port in universalPorts:
                print "Port {}: Open:".format(port), universalPorts[port]
            else:
                print "Port {}: Open".format(port)

    except socket.error:
        print "[!]Error connecting to port, exiting scan."
        sys.exit()

def main():
    global HOST
    parser = OptionParser(usage="usage: %prog [options] arg1")
    parser.add_option("-p", "--ping",
                      dest="ping",
                      default= False,
                      action="store_true",
                      help="Ping the Host IP to see if it is up")
    parser.add_option("-f", "--filename",
                      dest="filename",
                      metavar="FILENAME",
                      help="write output to FILE")
    parser.add_option("-u", "--host",
                      dest="hostname",
                      metavar="kickassugvgoftuk.onion",
                      help="Set the HOST from the command line parser")

    (options, args) = parser.parse_args()
    if not options.hostname:
        parser.error("[!]No Ip or Website was provided to scan!")
    else:
        HOST = options.hostname
    if options.filename:
        sys.stdout = open(options.filename, 'w')
    try:
        banner()
        ip = enumerateHost(HOST)
        if options.ping == True:
            pingScan(ip)
        quickScan(ip)

    except KeyboardInterrupt:
        print "[*]User canceled scan"
        sys.exit()

if __name__ == "__main__":
    main()