import httplib
import urllib
import urllib2
import argparse
import re
import string
import os
from itertools import  permutations
from string import ascii_lowercase
from subprocess import call
from termcolor import colored

version = 1.1
generator = "generator"
Generator = "Generator"
Version = "Version"
Drupal = "Drupal"

def update():
    pass
    #print "| Checking for update ..."
    #request = urllib2.urlopen('http://www.fileden.com/files/2013/6/29/3457655/version.txt')
    #response = request.read()
    #update = re.sub('[^0-9.]+', '',response)
    #if float(update) > version:
        #directory = os.path.dirname(os.path.realpath(__file__))
        #print "| New version available ..."
        #if os.path.exists('cmscan.py'):
            #os.remove('cmscan.py')
            #print "| Updating cmscam.py\n"
            #urllib.urlretrieve ("http://www.fileden.com/files/2013/6/29/3457655/cmscan.py", directory+"/cmscan.py")
    #elif float(update) == version:
        #print "| You're using the latest version ...\n"

def concrete5(TARGET, CMS):
    found = False
    my_line = 1
    connection = httplib.HTTPConnection(TARGET)
    connection.request("GET", "/index.php/dashboard")
    response = connection.getresponse()
    if response.status == 200:
        found = True
    if found == False:
	if CMS == "ConCrete5":
		print "[!] It's not a ConCrete5 site"
	else:
		print "[!] Unknown CMS"
    else:
        print "[+] It's a Concrete5 site"

def refinery(TARGET, CMS):
    found = False
    my_line = 1
    connection = httplib.HTTPConnection(TARGET)
    connection.request("GET", "/refinery/")
    response = connection.getresponse()
    if response.status == 200:
        found = True
    if found == False:
	if CMS == "Refinery":
		print "[!] It's not a Refinery site"
	else:
        	concrete5(TARGET, CMS)
    else:
        print "[+] It's a Refinery site"

def textpattern(TARGET, CMS):
    found = False
    my_line = 1
    connection = httplib.HTTPConnection(TARGET)
    connection.request("GET", "/textpattern/index.php")
    response = connection.getresponse()
    if response.status == 200:
        found = True
    if found == False:
	if CMS == "TextPattern":
		print "[!] It's not a TextPattern site"
	else:
        	refinery(TARGET, CMS)
    else:
        print "[+] It's a Textpattern site"

def modx(TARGET, CMS):
    found = False
    my_line = 1
    connection = httplib.HTTPConnection(TARGET)
    connection.request("GET", "/manager/")
    response = connection.getresponse()
    if response.status == 200:
        found = True
    if found == False:
	if CMS == "ModX":
		print "[!] It's not a ModX site"
	else:
        	textpattern(TARGET, CMS)
    else:
        print "[+] It's a modX site"

def drupal_shell_upload(TARGET):
    vulnerable = False
    print "| Scanning for shell upload vulnerability ..."
    print "| This may take some time ...\n"
    connection = httplib.HTTPConnection(TARGET)
    connection.request("GET", "/imce?dir=images")
    response = connection.getresponse()
    if response.status == 200:
        print "[+] You're able to upload a shell ..."
        print "[+] Vulnerable url: ", TARGET+"/imce?dir=images\n"
        vulnerable = True
    if vulnerable == False:
        print "[!] No shell upload vulnerability found ...\n"

def drupal_users_two(TARGET):
    users = "Not found"
    connection = httplib.HTTPConnection(TARGET)
    connection.request("GET", "/?q=admin/views/ajax/autocomplete/user/")
    response = connection.getresponse()
    if response.status == 200:
        for i in ascii_lowercase:
            url = "http://"+str(TARGET)+"/?q=admin/views/ajax/autocomplete/user/"+i
            request = urllib2.urlopen(url)
            for line in request:
                usernames = re.sub('[^A-Za-z0-9.,]+', '',line)
                users_duplicate = usernames.split(",")
                for item in users_duplicate:
                    if item == "":
                        pass
                    else:
                        username = item[:len(item)/2]
                        print "[+] Username found: ", username
                        users = "Found"
    print
    if users == "Not found":
        print "[!] Cannot get usernames ...\n"
    if users == "Found":
        drupal_shell_upload(TARGET)

def drupal_users_one(TARGET):
    users = "Not found"
    connection = httplib.HTTPConnection(TARGET)
    connection.request("GET", "/admin/views/ajax/autocomplete/user/a")
    response = connection.getresponse()
    if response.status == 200:
        for i in ascii_lowercase:
            url = "http://"+str(TARGET)+"/admin/views/ajax/autocomplete/user/"+i
            request = urllib2.urlopen(url)
            for line in request:
                usernames = re.sub('[^A-Za-z0-9.,]+', '',line)
                users_duplicate = usernames.split(",")
                for item in users_duplicate:
                    if item == "":
                        pass
                    else:
                        username = item[:len(item)/2]
                        print "[+] Username found: ", username
                        users = "Found"
    if users == "Not found":
        drupal_users_two(TARGET)
    if users == "Found":
        drupal_shell_upload(TARGET)

def drupal(TARGET, ENUMERATE, CMS):
    found = False
    my_line = 1
    connection = httplib.HTTPConnection(TARGET)
    connection.request("GET", "/CHANGELOG.txt")
    response = connection.getresponse()
    if response.status == 200:
        print "[+] It's a Drupal site"
        url = "http://"+str(TARGET)+"/CHANGELOG.txt"
        request = urllib2.urlopen(url)
        for line in request:
            if line == "\n":
                pass
            else:
                print "[+] Version: ", line
                found = True
            my_line += 1
            if my_line == 3:
                break
    if found == True:
        if ENUMERATE == "usernames":
            drupal_users_one(TARGET)
    else:
	if CMS == "Drupal":
		print "[!] It's not a Drupal site"
	else:
        	modx(TARGET, CMS)

def joomla_file_inclusion(TARGET):
    file_inclusion_found = False
    print "| Scanning for File Inclusion ..."
    print "| This may take a minute or two ...\n"
    FILE_INCLUSION = open("check/fileinclusion.txt", 'r').readlines()
    for line in FILE_INCLUSION:
        request=urllib.urlopen('http://'+TARGET+str(line))
        response = request.getcode()
        if response == 200:
            page_source = request.readlines()
            for line in page_source:
                if line.find("/home/") != -1:
                    print '[+] Vulnerable: ', 'http://'+TARGET+line
                    file_inclusion_found == True
        elif response == 302:
            page_source = request.readlines()
            for line in page_source:
                if line.find("/home/") != -1:
                    print '[+] Vulnerable: ', 'http://'+TARGET+line
                    file_inclusion_found == True
        elif response == 406:
            pass
        elif response == 404:
            pass
        elif response == 301:
            pass
    if file_inclusion_found == False:
        print "[!] None File Inclusion flaws found ...\n"

def joomla_xss(TARGET):
    xss_found = False
    print "| Scanning for XSS ..."
    print "| This may take a minute or two ...\n"
    XSS = open("check/xss.txt", 'r').readlines()
    for line in XSS:
        request=urllib.urlopen('http://'+TARGET+str(line))
        response = request.getcode()
        if response == 200:
            page_source = request.readlines()
            for line in page_source:
                if line.find("<script>alert('xss');</script>") != -1:
                    print '[+] Vulnerable: ', 'http://'+TARGET+line
                    xss_found == True
        if response == 406:
            pass
        elif response == 404:
            pass
        elif response == 301:
            pass
        elif response == 302:
            page_source = request.readlines()
            for line in page_source:
                if line.find("<script>alert('xss');</script>") != -1:
                    print '[!] Vulnerable: ', 'http://'+TARGET+line
                    xss_found == True
    if xss_found == False:
        print "[!] None XSS flaws found ...\n"

def joomla_sql_injection(TARGET):
    sql_found = False
    print "| Scanning for SQL Injection ..."
    print "| This may take a minute or two ...\n"
    SQL_INJECTION = open("check/sqlinjection.txt", 'r').readlines()
    for line in SQL_INJECTION:
        request = urllib2.urlopen('http://'+TARGET+str(line))
        page_source = request.readlines()
        for line in page_source:
            if line.find("SQL") != -1:
                print '[+] Vulnerable: ', 'http://'+TARGET+line
                sql_found == True
            if line.find("mysql") != -1:
                print '[+] Vulnerable: ', 'http://'+TARGET+line
                sql_found == True
    if sql_found == False:
        print "[!] None SQL Injection flaws found ...\n"

def joomla_firewall(TARGET):
    firewall_found = False
    print "| Scanning for available firewall(s) ..."
    print "| This may take a minute or two ...\n"
    FIREWALL = open("check/firewall.txt", 'r').readlines()
    for line in FIREWALL:
        request=urllib.urlopen('http://'+TARGET+str(line))
        response = request.getcode()
        if response == 200:
            print "[+] Firewall found: ", line, "[!] Url: ", str("http://")+TARGET+str("/")+str(line)
            firewall_found = True
    if firewall_found == False:
        print "[+] Not known firewall detected\n"

def joomla_plugins(TARGET, WORDLIST):
    if WORDLIST == None:
        print "[!] Need a wordlist to continue ... use -h switch for help"
    else:
        print "| Scanning for available plugins ..."
        print "| This may take some time ...\n"
        WORDLIST = open(WORDLIST, 'r').readlines()
        for line in WORDLIST:
            request=urllib.urlopen('http://'+TARGET+'/'+str(line))
            response = request.getcode()
            if response == 200:
                print "[+] Name: ", line, "[!] Url: ", str("http://")+TARGET+str("/")+str(line)
            if response == 406:
                print '[+] Name: ', line, '[!] Might be Vulnerable: ', str("http://")+TARGET+str("/")+str(line)

def joomla_check_two(TARGET, ENUMERATE, WORDLIST, SCAN, CMS):
    found = False
    try:
	    connection = httplib.HTTPConnection(TARGET)
	    connection.request("GET", "/language/english.xml")
	    response = connection.getresponse()
	    if response.status == 200:
		print "[+] It's a Joomla site"
		url = "http://"+str(TARGET)+"/language/english.xml"
		request = urllib2.urlopen(url)
		page_source = request.readlines()
		for line in page_source:
		    if line.find("component") != -1:
		        my_string = string.maketrans('','')
		        remove_letters = my_string.translate(my_string, string.digits)
		        new_string = line.translate(my_string, remove_letters)[:3]
		        version = '.'.join(new_string)
		        print "[+] Version: ", version, "\n"
		        found = True
		        break
    except:
	     pass
    if found == False:
	if CMS == "Joomla":
		print "[!] It's not a Joomla site"
	else:
		drupal(TARGET, ENUMERATE, CMS)
    elif found == True:
        if SCAN == None:
            joomla_firewall(TARGET)
            joomla_sql_injection(TARGET)
            joomla_xss(TARGET)
            joomla_file_inclusion(TARGET)
        if ENUMERATE == "plugins":
            joomla_plugins(TARGET, WORDLIST)

def joomla_check_one(TARGET,ENUMERATE, WORDLIST, SCAN, CMS):
    found = False
    try:
	    connection = httplib.HTTPConnection(TARGET)
	    connection.request("GET", "/administrator/components/com_content/content.xml")
	    response = connection.getresponse()
	    if response.status == 200:
		print "[+] It's a Joomla site"
		url = "http://"+str(TARGET)+"/administrator/components/com_content/content.xml"
		request = urllib2.urlopen(url)
		page_source = request.readlines()
		for line in page_source:
		    if line.find("component") != -1:
		        my_string = string.maketrans('','')
		        remove_letters = my_string.translate(my_string, string.digits)
		        new_string = line.translate(my_string, remove_letters)[:3]
		        version = '.'.join(new_string)
		        print "[+] Version: ", version, "\n"
		        found = True
		        break
    except:
		pass
    if found == False:
        joomla_check_two(TARGET,ENUMERATE, WORDLIST, SCAN, CMS)
    elif found == True:
        if SCAN == None:
            joomla_firewall(TARGET)
            joomla_sql_injection(TARGET)
            joomla_xss(TARGET)
            joomla_file_inclusion(TARGET)
        if ENUMERATE == "plugins":
            joomla_plugins(TARGET, WORDLIST)

def wordpress_plugins(TARGET, WORDLIST):
    if WORDLIST == None:
        print "[!] Need a wordlist to continue ... use -h switch for help"
    else:
        print "\n| Scanning for available plugins ..."
        print "| This may take some time ...\n"
        WORDLIST = open(WORDLIST, 'r').readlines()
        for line in WORDLIST:
            request=urllib.urlopen('http://'+TARGET+'/wp-content/plugins/'+str(line))
            response = request.getcode()
            if response == 200:
                print "[+] Name: ", line, "[!] Url: ", TARGET+str("/wp-content/plugins/")+str(line)

def wordpress_users(TARGET):
    print colored("| Scanning for available usernames ...", 'yellow')
    print colored("| This may take some time ...\n", 'yellow')
    for i in range(1, 100):
        if "www" in TARGET:
            url = "http://"+str(TARGET)+"/"+"?author="+str(i)
            user = urllib.urlopen(url).geturl()
            if "/author/" in user:
                remove = user.replace("http://", "")
                remove2 = remove.replace(str(TARGET), "")
                remove3 = remove2.replace('/author/', "")
                username = remove3.replace('/', "")
                print colored("[+] Username found: " + username, 'green')
        else:
            url = "http://www."+str(TARGET)+"/"+"?author="+str(i)
            user = urllib.urlopen(url).geturl()
            if "/author/" in user:
                remove = user.replace("http://", "")
                remove2 = remove.replace(str(TARGET), "")
                remove3 = remove2.replace('/author/', "")
                username = remove3.replace('/', "")
                print colored("[+] Username found: " + username, 'green')
    print "\n"
                
def wordpress_method_two(TARGET, ENUMERATE, WORDLIST, BRUTEFORCE, SCAN, CMS):
    try:
       found = False
       connection = httplib.HTTPConnection(TARGET)
       connection.request("GET", "/readme.html")
       response = connection.getresponse()
       if response.status == 200:
          url = "http://"+str(TARGET)+"/readme.html"
          request = urllib2.urlopen(url)
          page_source = request.readlines()
          for line in page_source:
              if line.find(Version) != -1:
                  my_string = string.maketrans('','')
                  remove_letters = my_string.translate(my_string, string.digits)
                  print colored("[+] It's a WordPress site", 'green')
                  new_string = line.translate(my_string, remove_letters)[:3]
                  version = '.'.join(new_string)
                  print colored("[+] Version: " + version + "\n", 'green')
                  found = True
    except:
        pass

    if found == True:
        if ENUMERATE == "usernames":
            wordpress_users(TARGET)
        elif ENUMERATE == "plugins":
            if WORDLIST == None:
               print colored("[!] Need a wordlist to continue ...", 'orange')
            else:
               wordpress_plugins(TARGET, WORDLIST)
        elif ENUMERATE =="all":
            wordpress_users(TARGET)
            wordpress_plugins(TARGET, WORDLIST)
        if BRUTEFORCE != None:
            wordpress_brute_force(TARGET, WORDLIST, BRUTEFORCE)
    else:
	if CMS == "WordPress":
		print colored("[!] It's not a WordPress site", 'orange')
	else:
                joomla_check_one(TARGET,ENUMERATE, WORDLIST, SCAN, CMS)

def wordpress_method_one(TARGET, ENUMERATE, WORDLIST, BRUTEFORCE, SCAN, CMS):
    found = False
    try:
	    url = "http://"+str(TARGET)+"/"
	    request = urllib2.urlopen(url)
	    page_source = request.readlines()
	    for line in page_source:
		if line.find(generator) != -1 or line.find(Generator) != -1:
		    if line.find("WordPress") != -1:
		        my_string = string.maketrans('','')
		        remove_letters = my_string.translate(my_string, string.digits)
		        print colored("[+] It's a WordPress site", 'green')
		        new_string = line.translate(my_string, remove_letters)[:3]
		        version = '.'.join(new_string)
		        print colored("[+] Version: " + version + "\n", 'green')
		        found = True
		break
    except:
	pass

    if found == True:
	if ENUMERATE == "usernames":
		wordpress_users(TARGET)
	elif ENUMERATE == "plugins":
		if WORDLIST == None:
		   print "[!] Need a wordlist to continue ... use -h for help"
		else:
		   wordpress_plugins(TARGET, WORDLIST)
	elif ENUMERATE =="all":
		wordpress_users(TARGET)
		wordpress_plugins(TARGET, WORDLIST)
	elif ENUMERATE != None:
		print "[!] Unknown enumerate type ..."
		if BRUTEFORCE != None:
		    wordpress_brute_force(TARGET, WORDLIST, BRUTEFORCE)
    else:
	wordpress_method_two(TARGET, ENUMERATE, WORDLIST, BRUTEFORCE, SCAN, CMS)

def dns_check(TARGET, ENUMERATE, WORDLIST, BRUTEFORCE, SCAN, CMS):
    connection = httplib.HTTPConnection(TARGET)
    connection.request("GET", "/")
    response = connection.getresponse()
    if response.status == 200:
        print colored('| Site response: ' + str(response.status) + ' ' + str(response.reason), 'yellow')
        print colored('| Scanning site ...\n', 'yellow')
        wordpress_method_one(TARGET, ENUMERATE, WORDLIST, BRUTEFORCE, SCAN, CMS)
    elif response.status == 301:
        print colored('| Site response: ' + str(response.status) + ' ' + str(response.reason), 'orange')
        print colored('| Scanning site ...\n', 'yellow')
        wordpress_method_one(TARGET, ENUMERATE, WORDLIST, BRUTEFORCE, SCAN, CMS)
    elif response.status == 302:
        print colored('| Site response: ' + str(response.status) + ' ' +  str(response.reason), 'orange')
        print colored('| Scanning site ...\n', 'yellow')
        wordpress_method_one(TARGET, ENUMERATE, WORDLIST, BRUTEFORCE, SCAN, CMS)
    else:
        print colored('Exiting, because got response: ' + str(response.status) + ' ' + str(response.reason), 'yellow')

def starting():
    TARGET = raw_input("TARGET > ")
    WORDLIST = raw_input("WORDLIST PATH > ")
    ENUMERATE = raw_input("ENUMERATE > ")
    BRUTEFORCE = raw_input("BRUTEFORCE USERNAME > ")
    SCAN = raw_input("CMS > ")
    call(["clear"])

    print colored("""
  ccccccccccc mmmm      mmm $$$$$$$$$$     ccccccccccc aaaaaaaaaaaa nnnn    nnn
 cccccccccccc mmmmm    mmmm $$$$$$        cccccccccccc aaaa     aaa nnnnn   nnn
 ccccccc      mmmm mmm  mmm $$$$$$$$$$$$$ ccccccc      aaaa     aaa nnnn n  nnn
 cccccccccccc mmmm      mmm        $$$$$$ cccccccccccc aaaaaaaaaaaa nnnn  n nnn
  ccccccccccc mmmm      mmm $$$$$$$$$$$$$  ccccccccccc aaaaa    aaa nnnn   nnnn

  v1.1 by c3nt3rX [centerx@hotmail.gr]
  """, 'blue')

    CMS = SCAN
    if CMS == "WordPress":
	wordpress_method_one(TARGET, ENUMERATE, WORDLIST, BRUTEFORCE, SCAN, CMS)
    elif CMS == "Joomla":
	joomla_check_one(TARGET, ENUMERATE, WORDLIST, SCAN, CMS)
    elif CMS == "Drupal":
	drupal(TARGET, ENUMERATE, CMS)
    elif CMS == "TextPattern":
	textpattern(TARGET, CMS)
    elif CMS == "ModX":
	modx(TARGET, CMS)
    elif CMS == "Refinery":
	refinery(TARGET, CMS)
    elif CMS == "ConCrete5":
	concrete5(TARGET, CMS)
    else:
        dns_check(TARGET, ENUMERATE, WORDLIST, BRUTEFORCE, SCAN, CMS)
  
    print colored("[!] For any bug contact me: centerx@hotmail.gr", 'yellow')
            
starting()
